/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        En {
            bindings = <&kp LG(F1)>;
            key-positions = <0 1>;
            timeout-ms = <0>;
            layers = <0>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <12 13>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <24 25>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE         &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6    &kp N7         &kp N8       &kp N9     &kp N0     &kp DELETE
&kp LEFT_CONTROL  &trans  &trans  &trans    &trans  &trans       &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp MINUS  &kp INSERT
&kp LEFT_SHIFT    &trans  &trans  &trans    &trans  &trans       &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp EQUAL  &kp C_MENU
                                  &kp LGUI  &trans  &kp SPACE    &kp RET   &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp PRINTSCREEN  &kp F1  &kp F2  &kp F3    &kp F4  &kp F5       &kp F6     &kp F7     &kp F8    &kp F9    &kp F10   &kp F11
&kp LCTRL        &none   &trans  &trans    &trans  &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp F12
&kp LSHFT        &trans  &trans  &trans    &trans  &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &trans
                                 &kp LGUI  &trans  &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        both {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOL_UP  &kp C_NEXT        &kp C_FAST_FORWARD  &kp C_BRI_UP   &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &kp K_MUTE    &kp C_PLAY_PAUSE  &kp K_STOP          &trans         &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_VOL_DN  &kp C_PREV        &kp C_REWIND        &kp C_BRI_DEC  &trans  &trans
                                        &trans        &trans        &trans          &trans        &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
