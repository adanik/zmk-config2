/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <0>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <12 13>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <24 25>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };

        play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <23 22>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <11 10>;
        };

        vol_dn {
            bindings = <&kp C_VOL_DN>;
            key-positions = <35 34>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <35 34 33>;
        };

        Left_braket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
        };

        Right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        left_figure {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <18 19>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
        };

        left_parent {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <30 31>;
        };

        right_parent {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <31 32>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <18 7>;
        };

        bk_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 17>;
        };

        sl_L4 {
            bindings = <&sl 4>;
            key-positions = <37 38>;
        };

        tog_L5 {
            bindings = <&tog 5>;
            key-positions = <39 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC           &kp F1           &kp F2        &kp F3        &kp F4        &kp F5          &kp F6        &kp F7         &kp F8        &kp F9                &kp F10                &kp INS
&kp LEFT_CONTROL  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT     &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_SHIFT
                                                 &kp LGUI      &trans        &kp SPACE       &kp RET       &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp F11  &kp F12               &kp F13                &kp F14           &kp F15              &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &kp PRINTSCREEN       &kp DELETE
&kp LCTRL  &trans   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp PIPE              &kp K_CONTEXT_MENU
&kp LSHFT  &trans   &kp LESS_THAN         &kp GREATER_THAN       &kp LEFT_BRACE    &kp RIGHT_BRACE      &kp MINUS       &kp UNDERSCORE  &kp EQUAL     &kp PLUS   &kp NON_US_BACKSLASH  &kp PIPE
                                          &kp LGUI               &trans            &kp SPACE            &kp ENTER       &trans          &kp RALT
            >;
        };

        both {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &trans  &none   &none   &kp C_VOL_DN     &kp C_VOL_UP  &none       &none   &kp C_PLAY_PAUSE  &trans  &kp K_CONTEXT_MENU
&bt BT_SEL 1  &bt BT_SEL 2  &trans  &none   &none   &kp C_BRI_DEC    &kp C_BRI_UP  &none       &none   &none             &none   &none
&bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &none   &kp C_PREV       &kp C_NEXT    &kp C_MUTE  &none   &none             &none   &none
                                    &trans  &trans  &trans           &trans        &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp LG(LS(NUMBER_1))  &kp LG(LS(NUMBER_2))  &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))      &kp LG(LS(NUMBER_6))  &kp LG(LS(NUMBER_7))  &kp LG(LS(NUMBER_8))  &kp LG(LS(NUMBER_9))  &kp LG(LS(NUMBER_0))  &trans
&trans  &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LG(NUMBER_3)      &kp LG(NUMBER_4)      &kp LG(NUMBER_5)    &kp LG(NUMBER_6)      &kp LG(NUMBER_7)      &kp LG(NUMBER_8)      &kp LG(NUMBER_9)      &kp LG(NUMBER_0)      &trans
&trans  &kp LA(NUMBER_1)      &kp LA(NUMBER_2)      &kp LA(NUMBER_3)      &kp LA(NUMBER_4)      &kp LA(NUMBER_5)    &kp LA(NUMBER_6)      &kp LA(NUMBER_7)      &kp LA(NUMBER_8)      &kp LA(NUMBER_9)      &kp LA(NUMBER_0)      &trans
                                                    &trans                &trans                &trans              &trans                &trans                &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans  &trans    &kp SLASH    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp COMMA
&trans  &trans  &trans  &trans  &trans  &trans    &kp PERCENT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT       &kp EQUAL
                        &trans  &trans  &trans    &trans       &trans        &kp NUMBER_0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
