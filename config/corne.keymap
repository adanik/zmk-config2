/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&soft_off {
    hold-time-ms = <2000>;

    /delete-property/ split-peripheral-off-on-press;
};

/ {
    combos {
        compatible = "zmk,combos";

        en {
            bindings = <&kp LG(F1)>;
            key-positions = <5 6>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <17 18>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <29 30>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };

        play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 29>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <6 18>;
        };

        vol_dn {
            bindings = <&kp C_VOL_DN>;
            key-positions = <30 18>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <30 6>;
        };

        Left_braket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
        };

        Right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        left_figure {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <30 31>;
        };

        right_figure {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <18 7>;
        };

        bk_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 17>;
        };

        left_screen {
            bindings = <&kp LC(LS(LG(LEFT)))>;
            key-positions = <38 5>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <11 10>;
        };

        break {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <11 23>;
        };

        right_screen {
            bindings = <&kp LS(LC(LG(RIGHT)))>;
            key-positions = <39 6>;
        };

        play_next {
            bindings = <&kp C_NEXT>;
            key-positions = <5 17>;
        };

        play_previous {
            bindings = <&kp C_PREVIOUS>;
            key-positions = <17 29>;
        };

        screen_switch {
            bindings = <&kp LC(LG(RIGHT))>;
            key-positions = <36 41>;
        };

        soft_off_right {
            bindings = <&soft_off>;
            key-positions = <11 39>;
        };

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <0 24>;
        };

        soft_off_left {
            bindings = <&soft_off>;
            key-positions = <0 38>;
        };

        layer3 {
            bindings = <&tog 3>;
            key-positions = <11 35>;
        };

        kapp {
            bindings = <&kp K_APP>;
            key-positions = <23 35>;
        };
    };

    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
        };

        ctrl_layer: ctrl_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <11 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q            &kp W            &kp E         &kp R              &kp T        &kp Y    &kp U               &kp I         &kp O             &kp P                     &kp BSPC
&hrm LCTRL TAB  &hrm LEFT_WIN A  &hrm LEFT_ALT S  &hrm LCTRL D  &hrm LEFT_SHIFT F  &kp G        &kp H    &hrm RIGHT_SHIFT J  &hrm RCTRL K  &hrm RIGHT_ALT L  &hrm RIGHT_WIN SEMICOLON  &hrm RCTRL SQT
&kp LEFT_WIN    &kp Z            &kp X            &kp C         &kp V              &kp B        &kp N    &kp M               &kp COMMA     &kp DOT           &kp FSLH                  &hrm RIGHT_SHIFT BACKSLASH
                                                  &mo 4         &mo 1              &kp SPACE    &kp RET  &mo 2               &mo 4
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR    &kp PERCENT          &kp CARET        &kp AMPERSAND  &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp INSERT
&kp GRAVE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp NUMBER_5         &kp NUMBER_6     &kp NUMBER_7   &kp NUMBER_8       &kp NUMBER_9          &kp NUMBER_0           &kp F12
&kp LWIN   &kp F1           &kp F2        &kp F3         &kp F4        &kp F5               &kp F6           &kp F7         &kp F8             &kp F9                &kp F10                &kp F11
                                          &kp LG(ENTER)  &trans        &kp LS(LG(ENTER))    &kp PRINTSCREEN  &trans         &kp K_APPLICATION
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none         &kp F21  &kp F22  &kp F23        &none    &none                &kp HOME         &kp PAGE_DOWN   &kp PAGE_UP        &kp END    &kp PG_UP       &kp DELETE
&kp CAPSLOCK  &kp F16  &kp F17  &kp F18        &kp F19  &kp F20              &kp LEFT_ARROW   &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT  &kp PAGE_DOWN   &none
&trans        &kp F11  &kp F12  &kp F13        &kp F14  &kp F15              &kp MINUS        &kp PLUS        &kp ASTERISK       &kp SLASH  &kp UNDERSCORE  &kp EQUAL
                                &kp LG(ENTER)  &trans   &kp LS(LG(ENTER))    &kp PRINTSCREEN  &trans          &kp K_APPLICATION
            >;
        };

        media {
            bindings = <
&bt BT_NXT    &kp LS(LC(LG(NUMBER_1)))  &kp LC(LS(LG(NUMBER_4)))  &none   &kp C_BRI_UP    &kp C_NEXT        &kp C_VOL_UP  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp EQUAL     &kp BACKSPACE
&bt BT_SEL 0  &kp LS(LC(LG(NUMBER_2)))  &kp LC(LS(LG(N5)))        &none   &kp C_BRI_AUTO  &kp C_PP          &kp C_MUTE    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp PLUS
&bt BT_SEL 1  &kp LS(LC(LG(NUMBER_3)))  &kp LS(LC(LG(NUMBER_6)))  &none   &kp C_BRI_DN    &kp C_PREVIOUS    &kp C_VOL_DN  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &kp MINUS
                                                                  &trans  &trans          &trans            &trans        &trans        &kp N0
            >;
        };

        wm {
            bindings = <
&kp LA(TAB)      &kp LG(LS(NUMBER_1))  &kp LG(LS(NUMBER_2))  &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))    &kp LG(LS(NUMBER_6))  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &kp LG(LS(N0))  &kp PRINTSCREEN
&kp LG(TAB)      &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LG(NUMBER_3)      &kp LG(NUMBER_4)      &kp LG(N5)        &kp LG(NUMBER_6)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &kp LG(N0)      &kp K_LOCK
&kp LS(LA(TAB))  &kp LG(LC(NUMBER_1))  &kp LG(LC(NUMBER_2))  &kp LG(LC(NUMBER_3))  &kp LG(LC(NUMBER_4))  &kp LG(LC(N5))    &kp LG(LC(NUMBER_6))  &kp LG(LC(N7))  &kp LG(LC(N8))  &kp LG(LC(N9))  &kp LG(LC(N0))  &kp K_APP
                                                             &trans                &kp LC(C)             &kp LC(V)         &kp RS(INSERT)        &kp LC(INS)     &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
