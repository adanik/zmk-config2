/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        en {
            bindings = <&kp LG(F1)>;
            key-positions = <5 6>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <17 18>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <29 30>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };

        play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 29>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <6 18>;
        };

        vol_dn {
            bindings = <&kp C_VOL_DN>;
            key-positions = <30 18>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <30 6>;
        };

        Left_braket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
        };

        Right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        left_figure {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <30 31>;
        };

        right_figure {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };

        left_screen {
            bindings = <&kp LC(LS(LG(LEFT)))>;
            key-positions = <37 16>;
        };

        break {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <11 10>;
        };

        right_screen {
            bindings = <&kp LS(LC(LG(RIGHT)))>;
            key-positions = <40 19>;
        };

        play_next {
            bindings = <&kp C_NEXT>;
            key-positions = <5 17>;
        };

        play_previous {
            bindings = <&kp C_PREVIOUS>;
            key-positions = <17 29>;
        };

        screen_switch {
            bindings = <&kp LC(LG(RIGHT))>;
            key-positions = <36 41>;
        };

        soft_off_right {
            bindings = <&soft_off>;
            key-positions = <11 39 6>;
        };

        soft_off_left {
            bindings = <&soft_off>;
            key-positions = <0 38 5>;
        };

        par_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        par_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        numlock {
            bindings = <&sl 4>;
            key-positions = <36 38>;
        };
    };

    behaviors {
        hr_mod: hr_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
        };

        ml_mod: ml_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "ML_MOD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
            flavor = "balanced";
        };

        sl_mod: sl_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_MOD";
            bindings = <&kp>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&hr_mod LEFT_WIN ESCAPE  &kp Q  &kp W  &kp E             &kp R                 &kp T                       &kp Y                       &kp U                 &kp I                &kp O    &kp P          &hr_mod RIGHT_WIN INSERT
&hr_mod LCTRL TAB        &kp A  &kp S  &kp D             &kp F                 &kp G                       &kp H                       &kp J                 &kp K                &kp L    &kp SEMICOLON  &hr_mod RCTRL SQT
&sl_mod LEFT_ALT 3       &kp Z  &kp X  &kp C             &kp V                 &kp B                       &kp N                       &kp M                 &kp COMMA            &kp DOT  &kp FSLH       &sl_mod RIGHT_ALT 3
                                       &ml_mod 4 DELETE  &ml_mod 1 RC(INSERT)  &hr_mod LEFT_SHIFT SPACE    &hr_mod RIGHT_SHIFT RETURN  &ml_mod 2 RS(INSERT)  &ml_mod 5 BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH             &kp DOLLAR    &kp PERCENT     &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS
&kp GRAVE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3         &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp MINUS
&kp F11    &kp F1           &kp F2        &kp F3               &kp F4        &kp F5          &kp F6        &kp F7         &kp F8        &kp F9                &kp F10                &kp F12
                                          &kp LG(PRINTSCREEN)  &trans        &sl 1           &caps_word    &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F23  &kp F21  &kp F22  &kp F13  &kp F14  &kp F15         &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP     &kp END       &kp PAUSE_BREAK  &kp INSERT
&kp F24  &kp F16  &kp F17  &kp F18  &kp F19  &kp F20         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT     &trans           &trans
&trans   &trans   &trans   &trans   &trans   &trans          &kp MINUS       &kp PLUS        &kp UNDERSCORE  &kp ASTERISK  &kp BACKSLASH    &kp EQUAL
                           &none    &trans   &kp CAPSLOCK    &sl 2           &trans          &kp LG(ENTER)
            >;
        };

        wm {
            bindings = <
&kp LA(LS(TAB))  &kp LG(LS(NUMBER_1))  &kp LG(LS(NUMBER_2))  &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))    &kp LG(LS(NUMBER_6))  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &kp LG(LS(N0))  &kp RA(TAB)
&kp LG(TAB)      &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LG(NUMBER_3)      &kp LG(NUMBER_4)      &kp LG(N5)        &kp LG(NUMBER_6)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &kp LG(N0)      &kp RG(TAB)
&kp LA(TAB)      &kp LG(LC(NUMBER_1))  &kp LG(LC(NUMBER_2))  &kp LG(LC(NUMBER_3))  &kp LG(LC(NUMBER_4))  &kp LG(LC(N5))    &kp LG(LC(NUMBER_6))  &kp LG(LC(N7))  &kp LG(LC(N8))  &kp LG(LC(N9))  &kp LG(LC(N0))  &kp RS(RA(TAB))
                                                             &kp K_APP             &kp LG(D)             &kp LG(S)         &kp LG(C)             &kp LG(Z)       &none
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans           &trans    &kp DOLLAR      &kp N7        &kp N8        &kp N9        &kp CARET  &kp PLUS
&trans  &trans  &trans  &trans  &trans           &trans    &kp PERCENT     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH  &kp ASTERISK
&trans  &trans  &trans  &trans  &trans           &trans    &kp UNDERSCORE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &kp EQUAL
                        &trans  &kp PRINTSCREEN  &sl 4     &kp ENTER       &kp NUMBER_0  &kp DOT
            >;
        };

        media {
            bindings = <
&bt BT_SEL 0        &bt BT_SEL 1              &bt BT_SEL 2              &bt BT_SEL 3              &bt BT_SEL 4              &bt BT_NXT            &kp C_VOL_UP  &kp C_NEXT         &kp C_BRIGHTNESS_INC  &ext_power EP_ON   &none  &kp K_LOCK
&kp LS(LC(LG(N0)))  &kp LS(LC(LG(NUMBER_1)))  &kp LC(LS(LG(NUMBER_2)))  &kp LS(LG(LC(NUMBER_3)))  &kp LS(LC(LG(NUMBER_4)))  &kp LS(LC(LG(N5)))    &kp C_MUTE    &kp C_PLAY_PAUSE   &kp C_BRI_AUTO        &ext_power EP_TOG  &none  &sys_reset
&none               &none                     &none                     &none                     &none                     &none                 &kp C_VOL_DN  &kp C_PREV         &kp C_BRI_DEC         &ext_power EP_OFF  &none  &soft_off
                                                                        &trans                    &trans                    &trans                &sl 5         &kp LG(LS(ENTER))  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        media_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };
};
