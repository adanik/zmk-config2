/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        En {
            bindings = <&kp LG(F1)>;
            key-positions = <0 1>;
            timeout-ms = <0>;
            layers = <0>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <12 13>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <24 25>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };

        play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <10 11>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <22 23>;
        };

        vol_dn {
            bindings = <&kp LS(C_VOL_DN)>;
            key-positions = <34 35>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <35 34 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC           &kp F1           &kp F2        &kp F3        &kp F4        &kp F5          &kp F6        &kp F7         &kp F8        &kp F9                &kp F10                &kp INS
&kp LEFT_CONTROL  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT     &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_SHIFT
                                                 &kp LGUI      &trans        &kp SPACE       &kp RET       &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F11    &kp F12  &kp F13   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp MINUS       &kp UNDERSCORE  &kp EQUAL     &kp PLUS   &kp PRINTSCREEN       &kp DELETE
&kp LCTRL   &kp GRAVE  &none    &none     &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp PIPE              &kp RIGHT_CONTROL
&kp LSHFT   &kp TILDE  &none    &none     &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &kp NON_US_BACKSLASH  &kp RIGHT_SHIFT
                                &kp LGUI  &trans                &kp SPACE                &kp ENTER       &trans          &kp RALT
            >;
        };

        both {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &trans  &none   &none   &kp C_VOL_DN     &kp C_VOL_UP  &none       &none   &kp C_PLAY_PAUSE  &kp LS(PRINTSCREEN)  &kp K_CONTEXT_MENU
&bt BT_SEL 1  &bt BT_SEL 2  &trans  &none   &none   &kp C_BRI_DEC    &kp C_BRI_UP  &none       &none   &none             &none                &none
&bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &none   &kp C_PREV       &kp C_NEXT    &kp C_MUTE  &none   &none             &none                &none
                                    &tog 4  &trans  &trans           &trans        &trans      &tog 5
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp COMMA     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PERCENT   &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans  &trans    &kp DOT       &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp PLUS
&trans  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &kp MINUS
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans          &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans          &kp UP_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT_ARROW
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
