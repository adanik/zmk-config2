/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&soft_off { hold-time-ms = <1000>; };

/ {
    combos {
        compatible = "zmk,combos";

        en {
            bindings = <&kp LG(F1)>;
            key-positions = <5 6>;
        };

        Ru {
            bindings = <&kp LG(F2)>;
            key-positions = <17 18>;
        };

        Ua {
            bindings = <&kp LG(F3)>;
            key-positions = <29 30>;
        };

        switch_layout {
            bindings = <&kp LG(SPACE)>;
            key-positions = <38 39>;
        };

        play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 29>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <6 18>;
        };

        vol_dn {
            bindings = <&kp C_VOL_DN>;
            key-positions = <30 18>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <30 6>;
        };

        Left_braket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
        };

        Right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        left_figure {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <30 31>;
        };

        right_figure {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <18 7>;
        };

        bk_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 17>;
        };

        left_soff {
            bindings = <&soft_off>;
            key-positions = <0 38>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <11 10>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <11 23>;
        };

        break {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <11 10 9>;
        };

        right_soff {
            bindings = <&soft_off>;
            key-positions = <11 39>;
        };

        play_next {
            bindings = <&kp C_NEXT>;
            key-positions = <5 17>;
        };

        play_previous {
            bindings = <&kp C_PREVIOUS>;
            key-positions = <17 29>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        layer4 {
            bindings = <&sl 4>;
            key-positions = <40 41>;
        };
    };

    behaviors {
        HomerowMods: HomerowMods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROWMODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <13 14 15 16 19 20 21 22>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q                    &kp W                    &kp E                 &kp R                      &kp T        &kp Y    &kp U                       &kp I                 &kp O                     &kp P                             &kp BSPC
&kp TAB     &HomerowMods LEFT_WIN A  &HomerowMods LEFT_ALT S  &HomerowMods LCTRL D  &HomerowMods LEFT_SHIFT F  &kp G        &kp H    &HomerowMods RIGHT_SHIFT J  &HomerowMods RCTRL K  &HomerowMods RIGHT_ALT L  &HomerowMods RIGHT_WIN SEMICOLON  &kp SQT
&kp LSHFT   &kp Z                    &kp X                    &kp C                 &kp V                      &kp B        &kp N    &kp M                       &kp COMMA             &kp DOT                   &kp FSLH                          &kp RIGHT_SHIFT
                                                              &kp LGUI              &mo 1                      &kp SPACE    &kp RET  &mo 2                       &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT        &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp INSERT
&kp LA(TAB)  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5       &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp F12
&trans       &kp F1           &kp F2        &kp F3        &kp F4        &kp F5             &kp F6        &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
                                            &trans        &trans        &kp PRINTSCREEN    &trans        &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none   &kp F21  &none    &none    &none    &none        &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &none  &kp DELETE
&none   &kp F16  &kp F17  &kp F18  &kp F19  &kp F20      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none  &kp TILDE
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15      &kp MINUS       &kp UNDERSCORE  &kp EQUAL     &kp PLUS   &none  &trans
                          &trans   &trans   &kp SPACE    &kp K_APP       &trans          &trans
            >;
        };

        both {
            bindings = <
&bt BT_NXT    &none    &none    &none    &none    &kp C_BRI_UP      &kp C_VOL_UP  &kp C_NEXT        &none  &none  &none  &kp LS(LC(LG(NUMBER_1)))
&bt BT_SEL 0  &kp F17  &kp F19  &kp F20  &kp F21  &kp C_BRI_AUTO    &kp C_MUTE    &kp C_PLAY_PAUSE  &none  &none  &none  &kp LS(LC(LG(NUMBER_2)))
&bt BT_SEL 1  &kp F13  &kp F14  &kp F15  &kp F16  &kp C_BRI_DN      &kp C_VOL_DN  &kp C_PREVIOUS    &none  &none  &none  &kp LS(LC(LG(NUMBER_3)))
                                &none    &none    &none             &none         &none             &none
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans  &trans    &kp SLASH    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp COMMA
&trans  &trans  &trans  &trans  &trans  &trans    &kp PERCENT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT       &kp EQUAL
                        &trans  &trans  &trans    &trans       &trans        &kp NUMBER_0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
